{
  "version": 3,
  "sources": ["../src/index.ts", "../src/HMSNoiseSupressorPlugin.ts"],
  "sourcesContent": ["export * from './HMSNoiseSupressorPlugin';\n", "/* eslint-disable complexity */\nimport {\n  HMSAudioPlugin,\n  HMSAudioPluginType,\n  HMSPluginSupportResult,\n  HMSPluginUnsupportedTypes,\n} from '@100mslive/hms-video';\n// @ts-ignore\nimport NoiseModule from './models/Noise.js';\n\nconst TAG = 'NoiseSuppressionProcessor';\nconst pkg = require('../package.json');\n\nconst RNNNOISE_SAMPLE_LENGTH = 480;\nconst MIN_SAMPLE_RATE = 44100;\nconst MAX_SAMPLE_RATE = 48000;\nconst DEFAULT_DURATION_MS = 80;\n\n/*The buffer size in units of sample-frames, it will be in power of 2.\nIf specified, the bufferSize must be one of the following values: 256, 512, 1024, 2048, 4096, 8192, 16384\nThis value controls how frequently the audioprocess event is dispatched and how many sample-frames need to be processed each call.\nLower values for bufferSize will result in a lower(better) latency. Higher values will be necessary to avoid audio breakup and glitches.*/\n\n//TODO: add implement HMSAudioPlugin after sdk changes\nexport class HMSNoiseSuppressionPlugin implements HMSAudioPlugin {\n  suppressNoise: boolean;\n  nodesConnected: boolean;\n  nodesCreated: boolean;\n  addNoise?: boolean; // Parameter to enable random noise addition to audio\n\n  noiseNode?: any; // audio node which will add extra noise if addNoise is enabled\n  processingNode: any; // audio node which will process the input audio\n  module: any; // noise module to remove extra noise and this is where RNN model is stored\n  bufferSize: number;\n  samplingRate: number;\n  channels: number;\n  durationInMs: number;\n  audioContext: AudioContext | null;\n  sourceNode: MediaStreamAudioSourceNode | null;\n  startTime: any;\n\n  constructor(durationInMs?: number) {\n    this.suppressNoise = true;\n    this.nodesConnected = false;\n    this.nodesCreated = false;\n    this.module = null;\n    this.bufferSize = 0;\n    this.samplingRate = 0;\n    this.audioContext = null;\n    this.sourceNode = null;\n    this.channels = 1;\n    if (durationInMs) {\n      this.durationInMs = durationInMs;\n    } else {\n      this.durationInMs = DEFAULT_DURATION_MS;\n    }\n  }\n\n  init(): Promise<void> | void {\n    if (!this.module) {\n      this.module = {\n        noExitRuntime: true,\n        noInitialRun: true,\n        preInit: [],\n        preRun: [],\n        postRun: [\n          function () {\n            console.log(`Loaded Javascript Module OK`);\n          },\n        ],\n        memoryInitializerPrefixURL: 'bin/',\n        arguments: ['input.ivf', 'output.raw'],\n      };\n\n      NoiseModule(this.module);\n      this.module.st = this.module._rnnoise_create();\n      this.module.ptr = this.module._malloc(RNNNOISE_SAMPLE_LENGTH * 4);\n      //set default random noise to false\n      this.addRandomNoise(false);\n    }\n\n    this.suppressNoise = true;\n  }\n\n  /*\n  @depreceated\n   */\n  isSupported(): boolean {\n    return (\n      navigator.userAgent.indexOf('Chrome') !== -1 ||\n      navigator.userAgent.indexOf('Edg') !== -1 ||\n      navigator.userAgent.indexOf('Edge') !== -1 ||\n      navigator.userAgent.indexOf('Firefox') !== -1\n    );\n  }\n\n  checkSupport(ctx?: AudioContext): HMSPluginSupportResult {\n    const deviceResult = {} as HMSPluginSupportResult;\n    const sampleRate = ctx?.sampleRate || MAX_SAMPLE_RATE; //using this as default\n    if (sampleRate < MIN_SAMPLE_RATE || sampleRate > MAX_SAMPLE_RATE) {\n      deviceResult.isSupported = false;\n      deviceResult.errType = HMSPluginUnsupportedTypes.DEVICE_NOT_SUPPORTED;\n      deviceResult.errMsg = 'audio device not supported for plugin, see docs';\n    } else {\n      deviceResult.isSupported = true;\n    }\n    //Removing Support for firefox because of AudioContext with different sample rate is not supported\n    const browserResult = {} as HMSPluginSupportResult;\n    if (['Chrome', 'Firefox', 'Edg', 'Edge'].some(value => navigator.userAgent.indexOf(value) !== -1)) {\n      browserResult.isSupported = true;\n    } else {\n      browserResult.isSupported = false;\n      browserResult.errType = HMSPluginUnsupportedTypes.PLATFORM_NOT_SUPPORTED;\n      browserResult.errMsg = 'browser not supported for plugin, see docs';\n    }\n\n    if (!deviceResult.isSupported) {\n      return deviceResult;\n    } else if (!browserResult.isSupported) {\n      return browserResult;\n    } else {\n      return deviceResult;\n    }\n  }\n\n  getName(): string {\n    return pkg.name;\n  }\n\n  getPluginType(): HMSAudioPluginType {\n    return HMSAudioPluginType.TRANSFORM;\n  }\n\n  getBufferSize(): number {\n    const val = (this.samplingRate * this.channels * this.durationInMs) / 1000;\n    let bufferSize = 1;\n    while (bufferSize < val) {\n      bufferSize *= 2;\n    }\n\n    return bufferSize;\n  }\n\n  stop(): void {\n    this.setEnabled(false);\n    this.nodesConnected = false;\n    this.nodesCreated = false;\n    if (this.processingNode) {\n      this.processingNode.disconnect();\n    }\n  }\n\n  setEnabled(value: boolean) {\n    this.suppressNoise = value;\n  }\n  removeNoise(buffer: any, module: any) {\n    const ptr = module.ptr;\n    const st = module.st;\n    for (let i = 0; i < RNNNOISE_SAMPLE_LENGTH; i++) {\n      module.HEAPF32[(ptr >> 2) + i] = buffer[i] * 32768;\n    }\n    module._rnnoise_process_frame(st, ptr, ptr);\n    for (let i = 0; i < RNNNOISE_SAMPLE_LENGTH; i++) {\n      buffer[i] = module.HEAPF32[(ptr >> 2) + i] / 32768;\n    }\n  }\n\n  processAudioTrack(audioContext: AudioContext, sourceNode: MediaStreamAudioSourceNode): Promise<AudioNode> {\n    if (!audioContext) {\n      throw new Error('Audio context is not created');\n    }\n    this.audioContext = audioContext;\n    if (!sourceNode) {\n      throw new Error('source node is not defined');\n    }\n    this.sourceNode = sourceNode;\n\n    if (this.module) {\n      //model is initialized\n      this.samplingRate = this.audioContext.sampleRate;\n      this.channels = 1; //TODO:check this\n      this.bufferSize = this.getBufferSize();\n      HMSNoiseSuppressionPlugin.log(\n        TAG,\n        'sampling rate, channels, bufferSize, durationMs',\n        this.samplingRate,\n        this.channels,\n        this.bufferSize,\n        this.durationInMs,\n      );\n\n      if (!this.nodesCreated) {\n        this.createNodes(audioContext);\n        this.nodesCreated = true;\n      }\n      if (!this.nodesConnected) {\n        this.connectAudioNodes(audioContext, sourceNode);\n        this.nodesConnected = true;\n      }\n      // optional to add random noise to audio\n      if (this.addNoise) {\n        this.processNoiseNode();\n      }\n      HMSNoiseSuppressionPlugin.log(TAG, this.suppressNoise);\n      this.onAudioProcess();\n    } else {\n      //initialize if not being done by sdk\n      this.init();\n    }\n    return this.processingNode;\n  }\n\n  private static log(tag: string, ...data: any[]) {\n    console.info(tag, ...data);\n  }\n\n  private onAudioProcess() {\n    const frameBuffer: any = [];\n    const inputBuffer: any = [];\n    const outputBuffer: any = [];\n\n    this.processingNode.onaudioprocess = (e: any) => {\n      const input = e.inputBuffer.getChannelData(0);\n      const output = e.outputBuffer.getChannelData(0);\n\n      // Drain input buffer.\n      for (let i = 0; i < this.bufferSize; i++) {\n        inputBuffer.push(input[i]);\n      }\n      while (inputBuffer.length >= RNNNOISE_SAMPLE_LENGTH) {\n        for (let i = 0; i < RNNNOISE_SAMPLE_LENGTH; i++) {\n          frameBuffer[i] = inputBuffer.shift();\n        }\n        if (this.suppressNoise) {\n          this.removeNoise(frameBuffer, this.module);\n        }\n        for (let i = 0; i < RNNNOISE_SAMPLE_LENGTH; i++) {\n          outputBuffer.push(frameBuffer[i]);\n        }\n      }\n      // Not enough data, exit early, otherwise the AnalyserNode returns NaNs.\n      if (outputBuffer.length < this.bufferSize) {\n        return;\n      }\n      // Flush output buffer.\n      for (let i = 0; i < this.bufferSize; i++) {\n        output[i] = outputBuffer.shift();\n      }\n    };\n  }\n\n  private connectAudioNodes(audioContext: AudioContext, sourceNode: MediaStreamAudioSourceNode) {\n    // nodes are connected to each other like in graph, output of one is passed to next in line\n    if (this.addNoise && audioContext) {\n      sourceNode.connect(this.noiseNode);\n      this.noiseNode.connect(this.processingNode);\n    } else {\n      sourceNode.connect(this.processingNode);\n    }\n  }\n\n  private createNodes(audioContext: AudioContext) {\n    if (audioContext) {\n      this.processingNode = audioContext.createScriptProcessor(\n        this.bufferSize,\n        1, // no of input channels\n        1, // no of output channels\n      );\n      if (this.addNoise) {\n        this.noiseNode = audioContext.createScriptProcessor(\n          this.bufferSize,\n          1, // no of input channels\n          1, // no of output channels\n        );\n      }\n    } else {\n      HMSNoiseSuppressionPlugin.log(TAG, 'audio context is null');\n    }\n  }\n\n  // addRandomNoise api\n  private addRandomNoise(value: boolean) {\n    this.addNoise = value;\n  }\n\n  private processNoiseNode() {\n    const addNoise = this.addNoise;\n    this.noiseNode.onaudioprocess = function (e: any) {\n      this.input = e.inputBuffer.getChannelData(0);\n      this.output = e.outputBuffer.getChannelData(0);\n      for (let i = 0; i < this.input.length; i++) {\n        if (addNoise) {\n          this.output[i] = this.input[i] + Math.random() / 100;\n        } else {\n          this.output[i] = this.input[i];\n        }\n      }\n    };\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
