var f=(h,e)=>()=>(e||h((e={exports:{}}).exports,e),e.exports);var a=f((v,m)=>{m.exports={version:"0.9.3",license:"MIT",main:"dist/index.cjs.js",typings:"dist/index.d.ts",files:["dist","src"],engines:{node:">=10"},browser:{path:!1,fs:!1,stream:!1},scripts:{start:'concurrently "yarn dev" "yarn types"',dev:"node ../../scripts/dev","build:only":"node ../../scripts/build",build:"yarn build:only && yarn types:build",types:"tsc -w","types:build":"tsc -p tsconfig.json",test:"jest --maxWorkers=1 --passWithNoTests",lint:"eslint -c ../../.eslintrc .","lint:fix":"yarn lint --fix",prepare:"yarn build",size:"size-limit",analyze:"size-limit --why",format:"prettier --write src/**/*.ts"},peerDependencies:{"@100mslive/hms-video":"^0.7.2"},name:"@100mslive/hms-noise-suppression",author:"vishaldhull09",module:"dist/index.js",devDependencies:{"@100mslive/hms-video":"0.9.3"},gitHead:"964db25173e4264322e03a949cbd739848361e14"}});import{HMSAudioPluginType as g,HMSPluginUnsupportedTypes as l}from"@100mslive/hms-video";import N from"../src/models/Noise.js";var d="NoiseSuppressionProcessor",S=a(),r=480,b=44100,p=48e3,A=80,u=class{constructor(e){this.suppressNoise=!0,this.nodesConnected=!1,this.nodesCreated=!1,this.module=null,this.bufferSize=0,this.samplingRate=0,this.audioContext=null,this.sourceNode=null,this.channels=1,e?this.durationInMs=e:this.durationInMs=A}init(){this.module||(this.module={noExitRuntime:!0,noInitialRun:!0,preInit:[],preRun:[],postRun:[function(){console.log("Loaded Javascript Module OK")}],memoryInitializerPrefixURL:"bin/",arguments:["input.ivf","output.raw"]},N(this.module),this.module.st=this.module._rnnoise_create(),this.module.ptr=this.module._malloc(r*4),this.addRandomNoise(!1)),this.suppressNoise=!0}isSupported(){return navigator.userAgent.indexOf("Chrome")!==-1||navigator.userAgent.indexOf("Edg")!==-1||navigator.userAgent.indexOf("Edge")!==-1||navigator.userAgent.indexOf("Firefox")!==-1}checkSupport(e){let s={},t=(e==null?void 0:e.sampleRate)||p;t<b||t>p?(s.isSupported=!1,s.errType=l.DEVICE_NOT_SUPPORTED,s.errMsg="audio device not supported for plugin, see docs"):s.isSupported=!0;let n={};return["Chrome","Firefox","Edg","Edge"].some(o=>navigator.userAgent.indexOf(o)!==-1)?n.isSupported=!0:(n.isSupported=!1,n.errType=l.PLATFORM_NOT_SUPPORTED,n.errMsg="browser not supported for plugin, see docs"),s.isSupported?n.isSupported?s:n:s}getName(){return S.name}getPluginType(){return g.TRANSFORM}getBufferSize(){let e=this.samplingRate*this.channels*this.durationInMs/1e3,s=1;for(;s<e;)s*=2;return s}stop(){this.setEnabled(!1),this.nodesConnected=!1,this.nodesCreated=!1,this.processingNode&&this.processingNode.disconnect()}setEnabled(e){this.suppressNoise=e}removeNoise(e,s){let t=s.ptr,n=s.st;for(let o=0;o<r;o++)s.HEAPF32[(t>>2)+o]=e[o]*32768;s._rnnoise_process_frame(n,t,t);for(let o=0;o<r;o++)e[o]=s.HEAPF32[(t>>2)+o]/32768}processAudioTrack(e,s){if(!e)throw new Error("Audio context is not created");if(this.audioContext=e,!s)throw new Error("source node is not defined");return this.sourceNode=s,this.module?(this.samplingRate=this.audioContext.sampleRate,this.channels=1,this.bufferSize=this.getBufferSize(),u.log(d,"sampling rate, channels, bufferSize, durationMs",this.samplingRate,this.channels,this.bufferSize,this.durationInMs),this.nodesCreated||(this.createNodes(e),this.nodesCreated=!0),this.nodesConnected||(this.connectAudioNodes(e,s),this.nodesConnected=!0),this.addNoise&&this.processNoiseNode(),u.log(d,this.suppressNoise),this.onAudioProcess()):this.init(),this.processingNode}static log(e,...s){console.info(e,...s)}onAudioProcess(){let e=[],s=[],t=[];this.processingNode.onaudioprocess=n=>{let o=n.inputBuffer.getChannelData(0),c=n.outputBuffer.getChannelData(0);for(let i=0;i<this.bufferSize;i++)s.push(o[i]);for(;s.length>=r;){for(let i=0;i<r;i++)e[i]=s.shift();this.suppressNoise&&this.removeNoise(e,this.module);for(let i=0;i<r;i++)t.push(e[i])}if(!(t.length<this.bufferSize))for(let i=0;i<this.bufferSize;i++)c[i]=t.shift()}}connectAudioNodes(e,s){this.addNoise&&e?(s.connect(this.noiseNode),this.noiseNode.connect(this.processingNode)):s.connect(this.processingNode)}createNodes(e){e?(this.processingNode=e.createScriptProcessor(this.bufferSize,1,1),this.addNoise&&(this.noiseNode=e.createScriptProcessor(this.bufferSize,1,1))):u.log(d,"audio context is null")}addRandomNoise(e){this.addNoise=e}processNoiseNode(){let e=this.addNoise;this.noiseNode.onaudioprocess=function(s){this.input=s.inputBuffer.getChannelData(0),this.output=s.outputBuffer.getChannelData(0);for(let t=0;t<this.input.length;t++)e?this.output[t]=this.input[t]+Math.random()/100:this.output[t]=this.input[t]}}};export{u as HMSNoiseSuppressionPlugin};
//# sourceMappingURL=index.js.map
