var S=Object.create;var l=Object.defineProperty;var b=Object.getOwnPropertyDescriptor;var A=Object.getOwnPropertyNames;var y=Object.getPrototypeOf,v=Object.prototype.hasOwnProperty;var h=i=>l(i,"__esModule",{value:!0});var R=(i,e)=>()=>(e||i((e={exports:{}}).exports,e),e.exports),M=(i,e)=>{h(i);for(var s in e)l(i,s,{get:e[s],enumerable:!0})},P=(i,e,s)=>{if(e&&typeof e=="object"||typeof e=="function")for(let t of A(e))!v.call(i,t)&&t!=="default"&&l(i,t,{get:()=>e[t],enumerable:!(s=b(e,t))||s.enumerable});return i},c=i=>P(h(l(i!=null?S(y(i)):{},"default",i&&i.__esModule&&"default"in i?{get:()=>i.default,enumerable:!0}:{value:i,enumerable:!0})),i);var f=R((_,E)=>{E.exports={version:"0.9.3",license:"MIT",main:"dist/index.cjs.js",typings:"dist/index.d.ts",files:["dist","src"],engines:{node:">=10"},browser:{path:!1,fs:!1,stream:!1},scripts:{start:'concurrently "yarn dev" "yarn types"',dev:"node ../../scripts/dev","build:only":"node ../../scripts/build",build:"yarn build:only && yarn types:build",types:"tsc -w","types:build":"tsc -p tsconfig.json",test:"jest --maxWorkers=1 --passWithNoTests",lint:"eslint -c ../../.eslintrc .","lint:fix":"yarn lint --fix",prepare:"yarn build",size:"size-limit",analyze:"size-limit --why",format:"prettier --write src/**/*.ts"},peerDependencies:{"@100mslive/hms-video":"^0.7.2"},name:"@100mslive/hms-noise-suppression",author:"vishaldhull09",module:"dist/index.js",devDependencies:{"@100mslive/hms-video":"0.9.3"},gitHead:"964db25173e4264322e03a949cbd739848361e14"}});M(exports,{HMSNoiseSuppressionPlugin:()=>d});var a=c(require("@100mslive/hms-video")),m=c(require("../src/models/Noise.js")),p="NoiseSuppressionProcessor",T=f(),u=480,C=44100,g=48e3,x=80,d=class{constructor(e){this.suppressNoise=!0,this.nodesConnected=!1,this.nodesCreated=!1,this.module=null,this.bufferSize=0,this.samplingRate=0,this.audioContext=null,this.sourceNode=null,this.channels=1,e?this.durationInMs=e:this.durationInMs=x}init(){this.module||(this.module={noExitRuntime:!0,noInitialRun:!0,preInit:[],preRun:[],postRun:[function(){console.log("Loaded Javascript Module OK")}],memoryInitializerPrefixURL:"bin/",arguments:["input.ivf","output.raw"]},(0,m.default)(this.module),this.module.st=this.module._rnnoise_create(),this.module.ptr=this.module._malloc(u*4),this.addRandomNoise(!1)),this.suppressNoise=!0}isSupported(){return navigator.userAgent.indexOf("Chrome")!==-1||navigator.userAgent.indexOf("Edg")!==-1||navigator.userAgent.indexOf("Edge")!==-1||navigator.userAgent.indexOf("Firefox")!==-1}checkSupport(e){let s={},t=(e==null?void 0:e.sampleRate)||g;t<C||t>g?(s.isSupported=!1,s.errType=a.HMSPluginUnsupportedTypes.DEVICE_NOT_SUPPORTED,s.errMsg="audio device not supported for plugin, see docs"):s.isSupported=!0;let r={};return["Chrome","Firefox","Edg","Edge"].some(n=>navigator.userAgent.indexOf(n)!==-1)?r.isSupported=!0:(r.isSupported=!1,r.errType=a.HMSPluginUnsupportedTypes.PLATFORM_NOT_SUPPORTED,r.errMsg="browser not supported for plugin, see docs"),s.isSupported?r.isSupported?s:r:s}getName(){return T.name}getPluginType(){return a.HMSAudioPluginType.TRANSFORM}getBufferSize(){let e=this.samplingRate*this.channels*this.durationInMs/1e3,s=1;for(;s<e;)s*=2;return s}stop(){this.setEnabled(!1),this.nodesConnected=!1,this.nodesCreated=!1,this.processingNode&&this.processingNode.disconnect()}setEnabled(e){this.suppressNoise=e}removeNoise(e,s){let t=s.ptr,r=s.st;for(let n=0;n<u;n++)s.HEAPF32[(t>>2)+n]=e[n]*32768;s._rnnoise_process_frame(r,t,t);for(let n=0;n<u;n++)e[n]=s.HEAPF32[(t>>2)+n]/32768}processAudioTrack(e,s){if(!e)throw new Error("Audio context is not created");if(this.audioContext=e,!s)throw new Error("source node is not defined");return this.sourceNode=s,this.module?(this.samplingRate=this.audioContext.sampleRate,this.channels=1,this.bufferSize=this.getBufferSize(),d.log(p,"sampling rate, channels, bufferSize, durationMs",this.samplingRate,this.channels,this.bufferSize,this.durationInMs),this.nodesCreated||(this.createNodes(e),this.nodesCreated=!0),this.nodesConnected||(this.connectAudioNodes(e,s),this.nodesConnected=!0),this.addNoise&&this.processNoiseNode(),d.log(p,this.suppressNoise),this.onAudioProcess()):this.init(),this.processingNode}static log(e,...s){console.info(e,...s)}onAudioProcess(){let e=[],s=[],t=[];this.processingNode.onaudioprocess=r=>{let n=r.inputBuffer.getChannelData(0),N=r.outputBuffer.getChannelData(0);for(let o=0;o<this.bufferSize;o++)s.push(n[o]);for(;s.length>=u;){for(let o=0;o<u;o++)e[o]=s.shift();this.suppressNoise&&this.removeNoise(e,this.module);for(let o=0;o<u;o++)t.push(e[o])}if(!(t.length<this.bufferSize))for(let o=0;o<this.bufferSize;o++)N[o]=t.shift()}}connectAudioNodes(e,s){this.addNoise&&e?(s.connect(this.noiseNode),this.noiseNode.connect(this.processingNode)):s.connect(this.processingNode)}createNodes(e){e?(this.processingNode=e.createScriptProcessor(this.bufferSize,1,1),this.addNoise&&(this.noiseNode=e.createScriptProcessor(this.bufferSize,1,1))):d.log(p,"audio context is null")}addRandomNoise(e){this.addNoise=e}processNoiseNode(){let e=this.addNoise;this.noiseNode.onaudioprocess=function(s){this.input=s.inputBuffer.getChannelData(0),this.output=s.outputBuffer.getChannelData(0);for(let t=0;t<this.input.length;t++)e?this.output[t]=this.input[t]+Math.random()/100:this.output[t]=this.input[t]}}};
//# sourceMappingURL=index.cjs.js.map
