import { HMSActions, HMSAudioTrackSettings, HMSConfig, HMSMessageInput, HMSPeer, HMSPreferredSimulcastLayer, HMSRoom, HMSTrackSource, HMSVideoTrackSettings, IHMSStore } from '@100mslive/react-sdk';
export declare class StoryBookSDK implements Partial<HMSActions> {
    private readonly store;
    private videoURLs;
    private dummyTrackURLs;
    private counter;
    private localPeer?;
    constructor(store: IHMSStore);
    setPreferredLayer(_trackId: string, _layer: HMSPreferredSimulcastLayer): Promise<void>;
    setVolume(_value: number, _trackId?: string): Promise<void>;
    setOutputDevice(_deviceId: string): void;
    setOutputVolume(_volume: number): void;
    addTrack(_track: MediaStreamTrack, _type: HMSTrackSource): Promise<void>;
    removeTrack(_trackId: string): Promise<void>;
    setEnabledTrack(_trackId: string, _enabled: boolean): Promise<void>;
    setMessageRead(readStatus: boolean, messageId: string): void;
    preview(config: HMSConfig): Promise<void>;
    join(...args: any[]): Promise<void>;
    attachVideo(trackID: string, videoElement: HTMLVideoElement): Promise<void>;
    leave(): Promise<void>;
    detachVideo(_trackID: string, videoElement: HTMLVideoElement): Promise<void>;
    sendBroadcastMessage(message: string | HMSMessageInput): Promise<void>;
    setLocalAudioEnabled(enabled: boolean): Promise<void>;
    setLocalVideoEnabled(enabled: boolean): Promise<void>;
    setScreenShareEnabled(enabled: boolean): Promise<void>;
    addTestRoom(room: Partial<HMSRoom>): void;
    addTestPeerAndSpeaker(peer: HMSPeer): void;
    addTestVideoURLs(urls: string[]): void;
    getRandomPeer(): HMSPeer;
    getPeers(): HMSPeer[];
    private log;
    private randomNumber;
    private randomFromArray;
    setAudioSettings(_settings: HMSAudioTrackSettings): Promise<void>;
    setVideoSettings(_settings: HMSVideoTrackSettings): Promise<void>;
}
